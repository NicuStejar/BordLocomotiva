package com.company.Data;

import javax.swing.*;
import java.io.*;

/**
 * Class used for reading data generated by Train Simulator's "Get Data" text file
 */
public class DataReader {

    private File file;
    private FileReader fileReader;
    private BufferedReader bufferedReader;
    private EngineData engineData;


    /**
     * @param fileName name of the "Get Data" text file
     */
    public DataReader(String fileName) throws FileNotFoundException {
        this.file = new File(fileName);
    }

    /**
     * @param engineData Data-Object used for storing data read from the file
     */
    public void setEngineData(EngineData engineData) {
        this.engineData = engineData;
    }

    /**
     * Main method used for reading the content of the file
     */
    public void read() throws IOException {
        this.fileReader = new FileReader(this.file);
        this.bufferedReader = new BufferedReader(this.fileReader);

        String splitBy = ":";
        String line = "";
        int index = 0;
        boolean hasLines = true;

        while (hasLines) { //reads the hole file and parses data found in it
            line = this.bufferedReader.readLine();
            if (line != null) {
                String[] values = line.split(splitBy);
                if (index == 0) {
                    this.engineData.setSpeedType(values[1]);
                } else if (index == 1) {
                    this.engineData.setSpeed(Float.parseFloat(values[1]));
                } else if (index == 2) {
                    //nothing that matters
                } else if (index == 3) {
                    this.engineData.setThrottleMin(Integer.parseInt(values[1]));
                } else if (index == 4) {
                    this.engineData.setThrottleMax(Integer.parseInt(values[1]));
                } else if (index == 5) {
                    this.engineData.setThrottle(Integer.parseInt(values[1]));
                } else if (index == 6) {
                    this.engineData.setTrainBrakeControl(Integer.parseInt(values[1]));
                } else if (index == 7) {
                    this.engineData.setTrainBrakeControlMin(Integer.parseInt(values[1]));
                } else if (index == 8) {
                    this.engineData.setTrainBrakeControlMax(Integer.parseInt(values[1]));
                } else if (index == 9) {
                    this.engineData.setEngineBreakControl(Integer.parseInt(values[1]));
                } else if (index == 10) {
                    this.engineData.setEngineBreakControlMin(Integer.parseInt(values[1]));
                } else if (index == 11) {
                    this.engineData.setEngineBreakControlMax(Integer.parseInt(values[1]));
                } else if (index == 12) {
                    this.engineData.setDynamicBreak(Integer.parseInt(values[1]));
                } else if (index == 13) {
                    this.engineData.setDynamicBreakMin(Integer.parseInt(values[1]));
                } else if (index == 14) {
                    this.engineData.setDynamicBreakMax(Integer.parseInt(values[1]));
                } else if (index == 15) {
                    this.engineData.setEmergencyBreak(Integer.parseInt(values[1]));
                } else if (index == 16) {
                    this.engineData.setReverser(Integer.parseInt(values[1]));
                } else if (index == 17) {
                    this.engineData.setReverserMin(Integer.parseInt(values[1]));
                } else if (index == 18) {
                    this.engineData.setReverserMax(Integer.parseInt(values[1]));
                } else if (index == 19) {
                    this.engineData.setAmmeter(Integer.parseInt(values[1]));
                } else if (index == 20) {
                    this.engineData.setRPM(Integer.parseInt(values[1]));
                } else if (index == 21) {
                    this.engineData.setAWS(Integer.parseInt(values[1]));
                } else if (index == 22) {
                    this.engineData.setAWSWarnCount(Integer.parseInt(values[1]));
                } else if (index == 23) {
                    this.engineData.setTrainBrakeCylinderPressureBAR(Float.parseFloat(values[1]));
                } else if (index == 24) {
                    this.engineData.setBrakePipePressureBAR(Float.parseFloat(values[1]));
                } else if (index == 25) {
                    this.engineData.setMainReservoirPressureBAR(Float.parseFloat(values[1]));
                } else if (index == 26) {
                    this.engineData.setCurrentSpeedLimit(Integer.parseInt(values[1]));
                } else if (index == 27) {
                    this.engineData.setNextSpeedLimit(Integer.parseInt(values[1]));
                } else if (index == 28) {
                    this.engineData.setNextSpeedLimitDistance(Float.parseFloat(values[1]));
                } else if (index == 29) {
                    this.engineData.setSignalType(Integer.parseInt(values[1]));
                } else if (index == 30) {
                    this.engineData.setSignalState(Integer.parseInt(values[1]));
                } else if (index == 31) {
                    this.engineData.setSignalDistance(Float.parseFloat(values[1]));
                } else if (index == 32) {
                    this.engineData.setSignalAspect(Integer.parseInt(values[1]));
                }
                index++;
            } else {
                hasLines = false;
                index = 0;
            }
        }

        //closing after us
        this.bufferedReader.close();
    }
}
